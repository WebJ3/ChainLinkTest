{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "text",
						"type": "string"
					}
				],
				"name": "MessageReceived",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "message",
						"type": "tuple"
					}
				],
				"name": "ccipReceive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastReceivedMessageDetails",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "text",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Note ensure you check the msg.sender is the OffRampRouter.",
					"params": {
						"message": "CCIP Message."
					}
				},
				"getLastReceivedMessageDetails()": {
					"returns": {
						"messageId": "The ID of the last received message.",
						"text": "The last received text."
					}
				},
				"getRouter()": {
					"returns": {
						"_0": "CCIP router address"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Should indicate whether the contract implements IAny2EVMMessageReceiver. e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. - If this returns false or reverts, only tokens are transferred to the receiver. - If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
					"params": {
						"interfaceId": "The interfaceId to check."
					},
					"returns": {
						"_0": "true if the interfaceId is supported."
					}
				}
			},
			"title": "- A simple contract for receiving string data across chains.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
				},
				"constructor": {
					"notice": "Constructor initializes the contract with the router address. 写死bsc testnet的router:0xE1053aE1857476f36A3C62580FF9b016E8EE8F6f"
				},
				"getLastReceivedMessageDetails()": {
					"notice": "Fetches the details of the last received message."
				},
				"getRouter()": {
					"notice": "Return the current router"
				},
				"supportsInterface(bytes4)": {
					"notice": "IERC165 supports an interfaceId."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"CCIP/Receiver.sol": "Receiver"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts-ccip@1.6.0/contracts/applications/CCIPReceiver.sol": {
			"keccak256": "0xc7083e9887e0f2a754de693fa5913fbbceefdcc4c20465d4eb55fc311123461a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9715be6ebe80643d77a0497f7e5702d525419065ccd66e8bdd4ce32d527909de",
				"dweb:/ipfs/QmQqnjPbpU35454Gc5zwrdFDegwSyo9kjjUfxWWPRj2Vcc"
			]
		},
		"@chainlink/contracts-ccip@1.6.0/contracts/interfaces/IAny2EVMMessageReceiver.sol": {
			"keccak256": "0x8f67554db88baee2d8facee3320fb85fd566f843b9e4bdb6870eafe1637d7919",
			"license": "MIT",
			"urls": [
				"bzz-raw://4fb75a68a7a53c0d2d444f996b60b77f329c6e25e96d695f6b6219eb92baebc5",
				"dweb:/ipfs/QmWCaGFSHSx17TgDou3EX2yuofPQnmkiuGX3isUmfHe3mb"
			]
		},
		"@chainlink/contracts-ccip@1.6.0/contracts/libraries/Client.sol": {
			"keccak256": "0x7c736e12ebb1d0e3a0c99436eacfac14d16ec941843050c9a7d82a6bff5b35a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://7cf3e0bbece35e0d1936225535b5ea91e63e45ad363d61fbec8423a53e96f6e5",
				"dweb:/ipfs/QmTMtUJcUGuMmLVMJ6PVTAWNatf9R77Cq6mzdDtFMUVB6h"
			]
		},
		"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"CCIP/Receiver.sol": {
			"keccak256": "0x2535ad7be6110315b715333302600292cd04eae565ec019b7dae12041000710d",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8398f3d510d6416c25a7cd9723c7aef328feb375d58305a9df5ff4247ce514c",
				"dweb:/ipfs/QmUjw1wwQiD6g3NPL63yYW8Wj6hxUtmQagv5hx2DiKD1zy"
			]
		}
	},
	"version": 1
}